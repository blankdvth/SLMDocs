{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SLM Docs","text":"<p>This site provides documentation on various aspects of the SLM Discord. Primarily, this site targets both end-users and developers of the custom Discord bot, although it may end up including general guides as well.</p> <p>This is an unofficial project that was created for the convenience and ease of access of information, an alternative to the previously scattered format (barebones documentation for users in the bot, developer documentation via wiki &amp; README, etc.)</p>"},{"location":"changelogs/","title":"Changelogs","text":"<p>This category contains any changelogs that may exist for the bot. Note that not all plugins may have changelogs, and that this is maintained separately from the main repository (there may be a delay in updates).</p>"},{"location":"changelogs/plugins/counting/","title":"Counting Changelog","text":"<p>This format is based on Keep a Changelog and this project mostly adheres to Semantic Versioning.</p> <p>As a public API does not exist, whether to increment the major, minor, or patch version, is arbitrarily determined by how much the changes will impact the end user. A new set of guidelines, differing from SemVer, is used:</p> <ul> <li>Major: A functionality change that the end user will notice, and need to adapt to.</li> <li>Minor: A functionality change that the end user will notice, but will not need to adapt to [significantly].</li> <li>Patch: A change that the end user will not notice, OR any bug fixes that the end user does not need to adapt to (without account for notice).</li> </ul>"},{"location":"changelogs/plugins/counting/#unreleased","title":"[Unreleased]","text":""},{"location":"changelogs/plugins/counting/#added","title":"Added","text":"<ul> <li>Additional functions<ul> <li><code>asin</code></li> <li><code>acos</code></li> <li><code>atan</code></li> <li><code>ord</code></li> <li><code>len</code></li> </ul> </li> </ul>"},{"location":"changelogs/plugins/counting/#changed","title":"Changed","text":"<ul> <li>Filtered out EOL error messages resulting from unclosed apostrophe (<code>'</code>) in expressions</li> </ul>"},{"location":"changelogs/plugins/counting/#211-2023-11-04","title":"[2.1.1] - 2023-11-04","text":""},{"location":"changelogs/plugins/counting/#added_1","title":"Added","text":"<ul> <li>Basic information about OP in message resends (for context in replies)</li> </ul>"},{"location":"changelogs/plugins/counting/#changed_1","title":"Changed","text":"<ul> <li>Updated documentation link to new site</li> </ul>"},{"location":"changelogs/plugins/counting/#fixed","title":"Fixed","text":"<ul> <li>Bot deleting its own messages thinking they were edited (underlying issue not fixed, this is just a stopgap)</li> <li>Issue that caused some exceptions to not be handled properly</li> </ul>"},{"location":"changelogs/plugins/counting/#210-2023-10-28","title":"[2.1.0] - 2023-10-28","text":""},{"location":"changelogs/plugins/counting/#added_2","title":"Added","text":"<ul> <li>Ability for OP to delete select messages via reaction</li> <li>Additional functions to the evaluator:<ul> <li><code>floor</code>/<code>rounddown</code>/<code>round_down</code></li> <li><code>ceil</code>/<code>roundup</code>/<code>round_up</code></li> <li><code>round</code></li> <li><code>sqrt</code>/<code>sqroot</code>/<code>squareroot</code></li> <li><code>sin</code></li> <li><code>cos</code></li> <li><code>tan</code></li> <li><code>degrees</code></li> <li><code>radians</code></li> <li><code>abs</code></li> <li><code>bitxor</code></li> <li><code>bitor</code></li> <li><code>log</code></li> <li><code>ln</code></li> </ul> </li> <li>Allow bot devs to bypass message resend mechanism via <code>//</code> in front of the message, for unexpected circumstances</li> <li>Descriptive outputs for when user input is assumed to be an expression, but could not be parsed</li> <li>Documentation (this document), and <code>help</code> keyword to link to it</li> <li><code>pi</code> and <code>e</code> as constants</li> <li>Support for replies and image attachments in message resends</li> <li>Versioning of plugin (in footer of embeds)</li> </ul>"},{"location":"changelogs/plugins/counting/#changed_2","title":"Changed","text":"<ul> <li>Limit on iterable length (default \u2192 <code>10000</code>)</li> <li>Raised grace period for duplicate messages to account for extra evaluation time (<code>0.75</code> \u2192 <code>1</code>)</li> <li>Raised limits on power calculations (<code>1000</code> \u2192 <code>10000</code>)</li> </ul>"},{"location":"changelogs/plugins/counting/#removed","title":"Removed","text":"<ul> <li>All random functions (<code>rand()</code>, <code>randint()</code>)</li> </ul>"},{"location":"changelogs/plugins/counting/#fixed_1","title":"Fixed","text":"<ul> <li>Edge cases resulting from parallel on_message &amp; on_message_edit/on_message delete handling</li> </ul>"},{"location":"changelogs/plugins/counting/#security","title":"Security","text":"<ul> <li>Fixed a problem with the backup timeout system that prevented it from working properly</li> </ul>"},{"location":"changelogs/plugins/counting/#200-2023-10-26","title":"[2.0.0] - 2023-10-26","text":""},{"location":"changelogs/plugins/counting/#added_3","title":"Added","text":"<ul> <li>Automatically attempt to recover when count is lost through a multitude of methods</li> <li>Command to allow bot developers to override count in exceptional circumstances (bug caused by bot, etc.)</li> <li>Grace period for duplicate numbers in count</li> <li>Prevent users from counting twice in a row</li> <li>Protections for message edits &amp; deletes that prevent last number from getting changed/deleted</li> <li>Support for evaluation of a wide variety of expressions</li> </ul>"},{"location":"changelogs/plugins/counting/#changed_3","title":"Changed","text":"<ul> <li>Bot now resends non-count messages as an embed, with the last count at the bottom</li> </ul>"},{"location":"changelogs/plugins/counting/#removed_1","title":"Removed","text":"<ul> <li>\"please refrain from chatting\" message (superseded by message resending)</li> </ul>"},{"location":"changelogs/plugins/counting/#fixed_2","title":"Fixed","text":"<ul> <li>Parallel on_message processing that could result in edge case</li> </ul>"},{"location":"changelogs/plugins/counting/#100-2023-10-14","title":"[1.0.0] - 2023-10-14","text":""},{"location":"changelogs/plugins/counting/#added_4","title":"Added","text":"<ul> <li>Initial Release</li> </ul>"},{"location":"developer/","title":"Developer","text":"<p>This category contains information relevant to developers of the bot.</p>"},{"location":"user/","title":"User","text":"<p>This category contains information relevant to end-users of the bot.</p> <p>Extensive documentation on select plugins are available here, however you can always view the built-in help (basic documentation) for a plugin by using the <code>?help</code> command and navigating to it.</p>"},{"location":"user/plugins/counting/","title":"Counting Documentation","text":"<p>This documentation is based on <code>v2.1.0</code>. (View the Changelog)</p>"},{"location":"user/plugins/counting/#rules","title":"Rules","text":"<ul> <li>Goal: Count as high as possible, cooperatively (one person sends a number, someone else sends the next number, repeat).</li> <li>You may not send two numbers in a row by yourself.</li> <li>The count will reset to <code>0</code> whenever someone sends the wrong number, or sends twice in a row.</li> <li>Messages will be marked with a \u2705 once successfully processed, if you see a message without a \u2705, wait for it to be processed before sending another number. Messages from the bot itself is exempt from this rule.</li> </ul>"},{"location":"user/plugins/counting/#supported-syntax","title":"Supported Syntax","text":"<p>A wide variety of syntax is supported in counting. You can simply send the next number (e.g. <code>42</code>), or you can send an expression that evaluates to that number.</p> <p>We use a minified version of the Python evaluator to evaluate the expressions -- a large amount of basic Python syntax is supported. Note that \\(\\LaTeX\\) syntax is not supported.</p> <p>Expressions must evaluate to an integer, if it evaluates to a float (decimal number), the expression will not be considered.</p>"},{"location":"user/plugins/counting/#operations","title":"Operations","text":""},{"location":"user/plugins/counting/#arithmetic","title":"Arithmetic","text":"<ul> <li><code>+</code>: Addition</li> <li><code>-</code>: Subtraction</li> <li><code>*</code>: Multiplication</li> <li><code>/</code>: Division (1)</li> <li><code>//</code>: Floor Division (2)</li> <li><code>%</code>: Modulus (3)</li> <li><code>**</code>: Power (4)</li> </ul> <ol> <li>Will return result as a float (decimal) number. You may need to handle decimals.</li> <li>Divide, then floor (round down) the result.</li> <li>Divide, and return the remainder. (e.g. <code>5 % 2</code> \u2192 <code>1</code>)</li> <li>The <code>^</code> syntax to represent power is not supported. Use <code>**</code> instead. There is also a limit to the size of power operations.</li> </ol>"},{"location":"user/plugins/counting/#logical","title":"Logical","text":"<ul> <li><code>==</code>: Equality</li> <li><code>&lt;</code>: Less Than</li> <li><code>&gt;</code>: Greater Than</li> <li><code>&lt;=</code>: Less Than or Equal To</li> <li><code>&gt;=</code>: Greater Than or Equal To</li> </ul>"},{"location":"user/plugins/counting/#binary","title":"Binary","text":"<ul> <li><code>&lt;&lt;</code>: Bitwise Left Shift</li> <li><code>&gt;&gt;</code>: Bitwise Right Shift</li> <li><code>&amp;</code>: Bitwise AND</li> <li><code>~</code>: Bitwise Invert</li> </ul> <p>Info</p> <p>Syntax for bitwise XOR (<code>^</code>) and bitwise OR (<code>|</code>) was removed to prevent confusion with the power and absolute value operators respectively.</p> <p>This functionality has been replaced by the <code>bitxor()</code> and <code>bitor()</code> functions respectively.</p>"},{"location":"user/plugins/counting/#miscellaneous","title":"Miscellaneous","text":"<ul> <li><code>not</code>: Negation - negates a boolean value (<code>not True</code> \u2192 <code>False</code>, <code>not False</code> \u2192 <code>True</code>)</li> <li><code>in</code>: whether something is contained within an iterable (<code>\"i\" in \"team\"</code> \u2192 <code>False</code>)</li> </ul>"},{"location":"user/plugins/counting/#functions","title":"Functions","text":"<p>When you see a parameter in a function with <code>foo=\"bar\"</code>, or similar, that parameter is optional -- the default value is the one after the equals sign</p> <ul> <li><code>int(value, base=10)</code>: Converts from a variety of data types, to an <code>int</code>. If converting from <code>float</code>, this will truncate (ignore all numbers after decimal).</li> <li><code>float(value)</code>: Converts from a variety of data types to a <code>float</code>.</li> <li><code>str(value)</code>: Converts from most data types to a <code>str</code>.</li> <li><code>floor(value)</code> (1): Rounds down.</li> <li><code>ceil(value)</code> (2): Rounds up.</li> <li><code>round(value, digits=0)</code>: Rounds. You can optionally specify the number of digits to keep after the decimal point. <code>.5</code>'s are rounded to the nearest even number (e.g. <code>2.5</code> down to <code>2</code>, but <code>3.5</code> up to <code>4</code>)</li> <li><code>sqrt(value)</code> (3): Get the square root of <code>value</code>.</li> <li><code>sin(value)</code>: Get the sine of <code>value</code> degrees.</li> <li><code>cos(value)</code>: Get the cosine of <code>value</code> degrees.</li> <li><code>tan(value)</code>: Get the tangent of <code>value</code> degrees.</li> <li><code>degrees(value_radians)</code>: Convert <code>value</code> in radians to degrees.</li> <li><code>radians(value_degrees)</code> Convert <code>value</code> in degrees to radians.</li> <li><code>abs(value)</code>: Get the absolute value of <code>value</code>.</li> <li><code>bitxor(a, b)</code>: Get the exclusive bitwise OR (XOR) of <code>a</code> and <code>b</code>. Equivalent to <code>a ^ b</code>.</li> <li><code>bitor(a, b)</code>: Get the bitwise OR of <code>a</code> and <code>b</code>. Equivalent to <code>a | b</code>.</li> <li><code>log(value, base=10)</code>: Get the log of <code>value</code>, to base <code>10</code> by default.</li> <li><code>ln(value, base=e)</code>: Get the log of <code>value</code>, to base <code>e</code> (Euler's number) by default.</li> </ul> <ol> <li>The aliases <code>rounddown</code> and <code>round_down</code> can be used instead of <code>floor</code>.</li> <li>The aliases <code>roundup</code> and <code>round_up</code> can be used instead of <code>ceil</code>.</li> <li>The aliases <code>sqroot</code> and <code>squareroot</code> can be used instead of <code>sqrt</code>.</li> </ol>"},{"location":"user/plugins/counting/#variables-constants","title":"Variables (Constants)","text":"<p>A few variables (constants) are provided, they cannot be changed (assignment forbidden).</p> <ul> <li><code>pi</code></li> <li><code>e</code></li> </ul>"},{"location":"user/plugins/counting/#base-literals","title":"Base Literals","text":"<p>You can specify a number in another base by using the following prefixes before the number:</p> <ul> <li>Binary: <code>0b</code> (e.g. <code>0b1111</code>)</li> <li>Octal: <code>0o</code> (e.g. <code>0o17</code>)</li> <li>Decimal: no prefix (e.g. <code>15</code>)</li> <li>Hexadecimal: <code>0x</code> (e.g. <code>0xf</code>)</li> </ul> <p>If you are not performing base-specific operations, and want everything to be an int, you can convert it. You can do this with the <code>int()</code> function.</p> <p>If you have a base literal (e.g. <code>0b1111</code>), you can pass it directly into <code>int()</code> (e.g. <code>int(0b1111)</code>). If you have a string containing a number in another base, you have to specify the base (e.g. <code>int(\"1111\", 2)</code>).</p>"},{"location":"user/plugins/counting/#if-else-expressions","title":"If-Else Expressions","text":"<p>Python's in-line if expressions are supported, using the standard format: <pre><code>option1 if boolean else option2\n</code></pre></p> <p>Example</p> <pre><code>100 if 2 &gt; 1 else 0\n</code></pre> <p>Would evaluate to <code>100</code> because <code>2&gt;1</code>. If it were <code>1&gt;2</code> instead, it would've evaluated to <code>0</code>.</p>"},{"location":"user/plugins/counting/#quirks-limitations","title":"Quirks &amp; Limitations","text":"<ul> <li>Power operations are limited to <code>10000</code> (either base or exponent), to prevent timely calculations.</li> <li>Iterables are limited to <code>10000</code> in length, to prevent memory overloading.</li> <li>Floats (decimal numbers) are automatically rounded to <code>16</code> decimal places, this is a limitation of the evaluator.</li> <li>Certain functionality (imports, attributes starting with <code>_</code>, etc) are blocked for security reasons -- do NOT attempt to bypass these.</li> </ul>"},{"location":"user/plugins/counting/#common-mistakes","title":"Common Mistakes","text":"<p>A list of common mistakes I've seen, and what to do instead, in no particular order.</p> <ul> <li>Assuming that a constant followed by brackets will implicitly multiply. They won't, you need to use <code>*</code>.  <ul> <li> <code>2(3)</code></li> <li> <code>2*(3)</code></li> </ul> </li> <li>Using <code>^</code> for power. Use <code>**</code> instead.<ul> <li> <code>2^3</code></li> <li> <code>2**3</code></li> </ul> </li> </ul>"}]}